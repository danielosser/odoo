/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Test}
        [Test/name]
            first unseen message should be directly preceded by the new message separator if there is a transient message just before it while composer is not focused
        [Test/model]
            ThreadViewComponent
        [Test/isFocusRequired]
            true
        [Test/assertions]
            3
        [Test/scenario]
            {Dev/comment}
                The goal of removing the focus is to ensure the thread is not marked as seen automatically.
                Indeed that would trigger set_last_seen_message no matter what, which is already covered by other tests.
                The goal of this test is to cover the conditions specific to transient messages,
                and the conditions from focus would otherwise shadow them.
            :testEnv
                {Record/insert}
                    [Record/traits]
                        Env
            @testEnv
            .{Record/insert}
                []
                    [Record/traits]
                        mail.channel
                    [mail.channel/channel_type]
                        channel
                    [mail.channel/id]
                        20
                    [mail.channel/is_pinned]
                        true
                    [mail.channel/name]
                        General
                    [mail.channel/uuid]
                        channel20uuid
                []
                    [Record/traits]
                        mail.channel_command
                    [mail.channel_command/name]
                        who
                []
                    {Dev/comment}
                        Needed partner & user to allow simulation of message reception
                    [Record/traits]
                        res.partner
                    [res.partner/id]
                        11
                    [res.partner/name]
                        Foreigner partner
                []
                    [Record/traits]
                        res.users
                    [res.users/id]
                        42
                    [res.users/name]
                        Foreigner user
                    [res.users/partner_id]
                        11
            @testEnv
            .{Record/insert}
                [Record/traits]
                    Server
                [Server/data]
                    @record
                    .{Test/data}
            :thread
                @testEnv
                .{Record/findById}
                    [Thread/id]
                        20
                    [Thread/model]
                        mail.channel
            :threadViewer
                @testEnv
                .{Record/insert}
                    [Record/traits]
                        ThreadViewer
                    [ThreadViewer/hasThreadView]
                        true
                    [ThreadViewer/thread]
                        @thread
            @testEnv
            .{Record/insert}
                [Record/traits]
                    ThreadViewComponent
                [ThreadViewComponent/threadView]
                    @threadViewer
                    .{ThreadViewer/threadView}
            {Dev/comment}
                send a command that leads to receiving a transient message
            @testEnv
            .{UI/focus}
                @threadViewer
                .{ThreadViewer/threadView}
                .{threadView/thread}
                .{Thread/composer}
                .{Composer/composerTextInputComponents}
                .{Collection/first}
                .{ComposerTextInputComponent/textarea}
            @testEnv
            .{Component/afterNextRender}
                {func}
                    @testEnv
                    .{UI/insertText}
                        /who
            @testEnv
            .{Component/afterNextRender}
                {func}
                    @testEnv
                    .{UI/click}
                        @threadViewer
                        .{ThreadViewer/threadView}
                        .{threadView/thread}
                        .{Thread/composer}
                        .{Composer/composerViewComponents}
                        .{Collection/first}
                        .{ComposerViewComponent/buttonSend}
            {Dev/comment}
                composer is focused by default, we remove that focus
            @testEnv
            .{UI/blur}
                @threadViewer
                .{ThreadViewer/threadView}
                .{threadView/thread}
                .{Thread/composer}
                .{Composer/composerTextInputComponents}
                .{Collection/first}
                .{ComposerTextInputComponent/textarea}
            {Dev/comment}
                simulate receiving a message
            @testEnv
            .{Component/afterNextRender}
                {func}
                    @testEnv
                    .{Env/owlEnv}
                    .{Dict/get}
                        services
                    .{Dict/get}
                        rpc
                    .{Function/call}
                        [route]
                            /mail/chat_post
                        [params]
                            [context]
                                [mockedUserId]
                                    42
                            [message_content]
                                test
                            [uuid]
                                channel20uuid
            {Test/assert}
                [0]
                    @record
                [1]
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/thread}
                    .{Thread/cache}
                    .{ThreadCache/messages}
                    .{Collection/length}
                    .{=}
                        2
                [2]
                    should display 2 messages (the transient & the received message), after posting a command
            {Test/assert}
                [0]
                    @record
                [1]
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{MessageListComponent/separatorNewMessages}
                [2]
                    separator should be shown as a message has been received
            {Test/assert}
                [0]
                    @record
                [1]
                    @testEnv
                    .{UI/getPosition}
                        @testEnv
                        .{Record/find}
                            [Record/traits]
                                Message
                            {func}
                                [in]
                                    m
                                [out]
                                    @m
                                    .{Message/isTransient}
                        .{Message/messageComponents}
                        .{Collection/first}
                    .{<}
                        @testEnv
                        .{UI/getPosition}
                            @threadViewer
                            .{ThreadViewer/threadView}
                            .{ThreadView/messageListComponents}
                            .{Collection/first}
                            .{MessageListComponent/separatorNewMessages}
                [2]
                    separator should be shown just after transient message
`;
