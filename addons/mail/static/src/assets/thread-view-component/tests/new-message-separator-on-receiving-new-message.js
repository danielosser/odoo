/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Test}
        [Test/name]
            new messages separator on receiving new message
        [Test/model]
            ThreadViewComponent
        [Test/isFocusRequired]
            true
        [Test/assertions]
            6
        [Test/scenario]
            :testEnv
                {Record/insert}
                    [Record/traits]
                        Env
            @testEnv
            .{Record/insert}
                []
                    [Record/traits]
                        mail.channel
                    [mail.channel/channel_type]
                        channel
                    [mail.channel/id]
                        20
                    [mail.channel/is_pinned]
                        true
                    [mail.channel/message_unread_counter]
                        0
                    [mail.channel/name]
                        General
                    [mail.channel/seen_message_id]
                        1
                    [mail.channel/uuid]
                        randomuuid
                []
                    [Record/traits]
                        mail.message
                    [mail.message/body]
                        blah
                    [mail.message/id]
                        1
                    [mail.message/model]
                        mail.channel
                    [mail.message/res_id]
                        20
                []
                    [Record/traits]
                        res.partner
                    [res.partner/id]
                        11
                    [res.partner/name]
                        Foreigner partner
                []
                    [Record/traits]
                        res.users
                    [res.users/id]
                        42
                    [res.users/name]
                        Foreigner user
                    [res.users/partner_id]
                        11
            @testEnv
            .{Record/insert}
                [Record/traits]
                    Server
                [Server/data]
                    @record
                    .{Test/data}
            :thread
                @testEnv
                .{Record/findById}
                    [Thread/id]
                        20
                    [Thread/model]
                        mail.channel
            :threadViewer
                @testEnv
                .{Record/insert}
                    [Record/traits]
                        ThreadViewer
                    [ThreadViewer/hasThreadView]
                        true
                    [ThreadViewer/thread]
                        @thread
            @testEnv
            .{Record/insert}
                [Record/traits]
                    ThreadViewComponent
                [ThreadViewComponent/threadView]
                    @threadViewer
                    .{ThreadViewer/threadView}
            {Test/assert}
                [0]
                    @record
                [1]
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/thread}
                    .{Thread/cache}
                    .{ThreadCache/messages}
                    .{Collection/length}
                    .{=}
                        1
                [2]
                    should have an initial message
            {Test/assert}
                [0]
                    @record
                [1]
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{MessageListComponent/separatorNewMessages}
                    .{isFalsy}
                [2]
                    should not display 'new messages' separator

            @testEnv
            .{UI/blur}
                @threadViewer
                .{ThreadViewer/threadView}
                .{ThreadView/thread}
                .{Thread/composer}
                .{Composer/composerTextInputComponents}
                .{Collection/first}
                .{ComposerTextInputComponent/textarea}
            {Dev/comment}
                simulate receiving a message
            @testEnv
            .{UI/afterEvent}
                [eventName]
                    o-thread-view-hint-processed
                [func]
                    @testEnv
                    .{Env/owlEnv}
                    .{Dict/get}
                        services
                    .{Dict/get}
                        rpc
                    .{Function/call}
                        [route]
                            /mail/chat_post
                        [params]
                            [context]
                                [mockedUserId]
                                    42
                            [message_content]
                                hu
                            [uuid]
                                @thread
                                .{Thread/uuid}
                [message]
                    should wait until new message is received
                [predicate]
                    {func}
                        [in]
                            hint
                            threadViewer
                        [out]
                            @threadViewer
                            .{ThreadViewer/thread}
                            .{Thread/id}
                            .{=}
                                20
                            .{&}
                                @threadViewer
                                .{ThreadViewer/thread}
                                .{Thread/model}
                                .{=}
                                    mail.channel
                            .{&}
                                @hint
                                .{Hint/type}
                                .{=}
                                    message-received
            {Test/assert}
                [0]
                    @record
                [1]
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/thread}
                    .{Thread/cache}
                    .{ThreadCache/messages}
                    .{Collection/length}
                    .{=}
                        2
                [2]
                    should now have 2 messages after receiving a new message
            {Test/assert}
                [0]
                    @record
                [1]
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{MessageListComponent/separatorNewMessages}
                [2]
                    'new messages' separator should be shown
            {Test/assert}
                [0]
                    @record
                [1]
                    @testEnv
                    .{UI/getPosition}
                        @threadViewer
                        .{ThreadViewer/threadView}
                        .{ThreadView/messageListComponents}
                        .{Collection/first}
                        .{MessageListComponent/separatorNewMessages}
                    .{<}
                        @testEnv
                        .{UI/getPosition}
                            @testEnv
                            .{Record/findById}
                                [Message/id]
                                    2
                            .{Message/messageComponents}
                            .{Collection/first}
                [2]
                    'new messages' separator should be shown above new message received

            @testEnv
            .{Component/afterNextRender}
                {func}
                    @testEnv
                    .{UI/afterEvent}
                        [eventName]
                            o-thread-last-seen-by-current-partner-message-id-changed
                        [func]
                            @testEnv
                            .{UI/focus}
                                @threadViewer
                                .{ThreadViewer/threadView}
                                .{ThreadView/thread}
                                .{Thread/composer}
                                .{Composer/composerTextInputComponents}
                                .{Collection/first}
                                .{ComposerTextInputComponent/textarea}
                        [message]
                            should wait until last seen by current partner message id changed after focusing the thread
                        [predicate]
                            {func}
                                [in]
                                    thread
                                [out]
                                    @thread
                                    .{Thread/id}
                                    .{=}
                                        20
                                    .{&}
                                        @thread
                                        .{Thread/model}
                                        .{=}
                                            mail.channel
            {Test/assert}
                [0]
                    @record
                [1]
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{messageListComponent/separatorNewMessages}
                    .{isFalsy}
                [2]
                    'new messages' separator should no longer be shown as last message has been seen
`;
